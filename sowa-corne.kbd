;; kanata config for split 42-keys corne keyboard

;; Not sure about this option
;; See docs: https://github.com/jtroo/kanata/blob/main/docs/config.adoc#process-unmapped-keys

(defcfg
  process-unmapped-keys yes
  concurrent-tap-hold yes

  ;; apply config to corne kb only
  linux-dev-names-include (
    "Weekin Weekin Corne_W"
    "Weekin Weekin Corne_W Mouse"
    "Weekin Weekin Corne_W Keyboard"
    "Weekin Weekin Corne_W Consumer Control"
  )
)

;; Only one defsrc is allowed.
;;
;; defsrc defines the keys that will be intercepted by kanata. The order of the
;; keys matches with deflayer declarations and all deflayer declarations must
;; have the same number of keys as defsrc. Any keys not listed in defsrc will
;; be passed straight to the operating system.

(defsrc
  tab  q    w    e    r    t         y    u    i    o    p    \
  caps a    s    d    f    g         h    j    k    l    ;    ret
  lsft z    x    c    v    b         n    m    ,    .    /    rsft
                 lctl menu lalt      ralt spc  rctl
)

#|
(deflayer 42keys
  _    _    _    _    _    _         _    _    _    _    _    _
  _    _    _    _    _    _         _    _    _    _    _    _
  _    _    _    _    _    _         _    _    _    _    _    _
                 _    _    _         _    _    _
)
|#

;; The first layer defined is the layer that will be active by default when
;; kanata starts up. This layer is the standard QWERTY layout.

(deflayer qwerty
  tab  q    w    e    r    t         y    u    i    o    p    \
  caps a    s    d    f    g         h    j    k    l    ;    ret
  lsft z    x    c    v    b         n    m    ,    .    /    rsft
                 lctl menu @lr       ralt spc  rctl
)

;; sowa
(deflayer sowa
  q    b    l    @d0  w    ]         '    k    o    u    j    [
  x    n    @r0  @t0  @c0  `         /    @h0  @a0  @e0  i    ;
  @RU  z    @v0  m    @s0  g         f    p    y    ,    .    _
                 _    _    @lr       _    _    _
)

;; all alpha layers + live reload
(deflayer layers
  _    @qwr @sw  @swr lrld @pr       _    _    _    _    _    _
  _    _    _    _    _    _         _    _    _    _    _    _
  _    _    _    _    _    _         _    _    _    _    _    _
                 _    _    _         _    _    _
)

;; sowaru
;; a complimentary layer to work with default Cyrillic layout ЙЦУКЕН
(deflayer sowaru
  /    '    s    @q1  o    ]         [    w    h    u    x    i
  .    b    @j1  @fo  @r1  `         a    @g1  @y1  @c1  d    ;
  @EN  p    @e1  m    @t1  z         l    n    k    v    ,    _
                 _    _    @lr       _    _    _
)

(deflayer promethium
  `    v    w    @g2  m    -         '    '    .    ,    '    z
  q    s    @n2  @t2  @h2  k         /    @a2  @e2  @i2  c    ;
  @RUp f    @p2  d    @l2    x       j    u    o    y    b    _
                 _    @r2  @lr       _    @sym _
)

;; sowaru-promethium compatible layer
(deflayer sowaru_pm
  /    '    s    @q1  o    ]         `    w    h    u    x    i
  .    b    @j3  @fo  @r3  [         a    @g3  @y1  @c3  d    ;
  @ENp l    @e1  m    t    z         p    n    k    v    ,    _
                 _    @r2  @lr       _    _    _
)

(defalias

  ;; tap: 1, hold: switch to layer
  lr (tap-hold 200 200 1 (layer-while-held layers))
  sym (tap-hold 200 200 spc (layer-while-held symbols))

  ;; layer-switch changes the base layer
  sw (layer-switch sowa)
  swr (layer-switch sowaru)
  qwr (layer-switch qwerty)
  pr (layer-switch promethium)

  ;; switch system language with Shift+Alt
  ;; todo: pick different hotkey to prevent accidentally switching
  EN (multi lsft lalt (layer-switch sowa))
  RU (multi lsft lalt (layer-switch sowaru))

  ;; switching between promethium and sowaru
  ENp (multi lsft lalt (layer-switch promethium))
  RUp (multi lsft lalt (layer-switch sowaru_pm))

  ;; on hold switch to sowa layer for English letters for shortcuts
  r1 (tap-hold 200 200 r (multi lctl (layer-while-held sowa)))
  g1 (tap-hold 200 200 g (multi rctl (layer-while-held sowa)))
  j1 (tap-hold 200 200 j (multi lalt (layer-while-held sowa)))
  c1 (tap-hold 200 200 c (multi ralt (layer-while-held sowa)))

  ;; sowaru-promethium
  r3 (tap-hold 200 200 r (multi lctl (layer-while-held promethium)))
  g3 (tap-hold 200 200 g (multi rctl (layer-while-held promethium)))
  j3 (tap-hold 200 200 j (multi lalt (layer-while-held promethium)))
  c3 (tap-hold 200 200 c (multi ralt (layer-while-held promethium)))

  ;; stay on sowaru layer for capital Cyrillic letters
  fo (tap-hold 200 200 f lsft)
  y1 (tap-hold 200 200 y rsft)

  ;; home row mods
  c0 (tap-hold 200 200 c lctl)
  h0 (tap-hold 200 200 h rctl)
  t0 (tap-hold 200 200 t lsft)
  a0 (tap-hold 200 200 a rsft)
  r0 (tap-hold 200 200 r lalt)
  e0 (tap-hold 200 200 e ralt)

  ;; home row mods promethium
  h2 (tap-hold 200 200 h lctl)
  a2 (tap-hold 200 200 a rctl)
  t2 (tap-hold 200 200 t lsft)
  e2 (tap-hold 200 200 e rsft)
  n2 (tap-hold 200 200 n lalt)
  i2 (tap-hold 200 200 i ralt)

  s0 (tap-hold 200 200 s (layer-while-held nav))
  t1 (tap-hold 200 200 t (layer-while-held nav))
  r2 (tap-hold 200 200 r (layer-while-held nav))
  l2 (tap-hold 200 200 l (layer-while-held legacy))

  v0 (tap-hold 200 200 v (layer-while-held left_hand))
  e1 (tap-hold 200 200 e (layer-while-held left_hand))
  p2 (tap-hold 200 200 p (layer-while-held left_hand))

  d0 (tap-hold 200 200 d (layer-while-held numbers))
  q1 (tap-hold 200 200 q (layer-while-held numbers))
  g2 (tap-hold 200 200 g (layer-while-held numbers))

  dw C-bspc ;; delete a word
  cw (caps-word 2000) ;; caps word
  rdo C-S-z ;; redo
)

(deflayer nav
  esc  _    _    @dw  _    _         _    _    up   esc  _    _
  _    _    lalt lsft lctl _         _    lft  down rght _    _
  _    _    _    bspc _    ret       _    ret  tab  del  _    _
                 _    _    _         _    _    _
)

(deflayer legacy
  esc  _    _    @dw  _    _         _    _    up   esc  _    _
  _    _    _    bspc _    _         _    lft  down rght _    _
  _    C-z  _    bspc _    _         _    ret  tab  del  _    _
                 _    _    _         _    _    _
)

(deflayer left_hand
  _    _    _    _    _    _         _    _    _    _    _    _
  _    _    _    C-x  _    _         _    _    _    _    _    _
  _    _    _    C-c  C-v  _         _    _    _    _    _    _
                 C-z  _    @rdo      _    _    _
)

(deflayer numbers
  _    _    lsft _    _    _         _    7    8    9    =    _
  _    _    _    _    _    _         _    4    5    6    0    _
  _    _    _    _    _    _         _    1    2    3    -    _
                 _    _    _         _    _    _
)

(deflayer symbols
  _    _    _    _    _    _         _    _    _    _    _    _
  _    _    _    _    _    _         _    _    _    _    _    _
  _    _    _    _    _    _         _    _    _    _    _    _
                 _    _    _         _    _    _
)
